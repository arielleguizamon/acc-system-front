{"version":3,"sources":["components/transactioncard.js","App.js","configs.js","reportWebVitals.js","index.js"],"names":["TransactionCard","transaction","useState","open","setOpen","Card","sectioned","Stack","vertical","Button","onClick","ariaExpanded","ariaControls","TextContainer","style","color","type","Collapsible","id","transition","duration","timingFunction","expandOnPrint","amount","Date","effectiveDate","toLocaleDateString","App","transactions","setTransactions","error","setError","fetchTransactions","a","axios","get","resp","data","useEffect","AppProvider","Page","height","map","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAmDeA,EAzCS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACnBC,oBAAS,GADU,mBACpCC,EADoC,KAC9BC,EAD8B,KAE3C,OACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACC,EAAA,EAAD,CAAOC,UAAQ,EAAf,UACE,cAACC,EAAA,EAAD,CACEC,QAAS,kBAAMN,GAASD,IACxBQ,aAAcR,EACdS,aAAa,oBAHf,oBAOA,cAACC,EAAA,EAAD,UACE,oBAAGC,MAAO,CAAEC,MAA4B,UAArBd,EAAYe,KAAmB,MAAQ,SAA1D,UACE,uCACCf,EAAYe,UAGjB,cAACC,EAAA,EAAD,CACEd,KAAMA,EACNe,GAAG,oBACHC,WAAY,CACVC,SAAU,QACVC,eAAgB,eAElBC,eAAa,EAPf,SASE,eAACT,EAAA,EAAD,WACE,8BACE,yCADF,IACmBZ,EAAYsB,UAE/B,8BACE,uCACC,IAAIC,KAAKvB,EAAYwB,eAAeC,mCCLpCC,MA9Bf,WAAgB,IAAD,EAC2BzB,mBAAS,IADpC,mBACN0B,EADM,KACQC,EADR,OAEa3B,oBAAS,GAFtB,mBAEN4B,EAFM,KAECC,EAFD,KAIPC,EAAiB,uCAAG,4BAAAC,EAAA,+EAEHC,IAAMC,IAAN,UCdT,wBDcS,kBAFG,OAEhBC,EAFgB,OAGtBP,EAAgBO,EAAKC,MAHC,gDAKtBN,GAAS,GALa,yDAAH,qDAYvB,OAJAO,qBAAU,WACRN,MACC,IAGD,cAACO,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,sBAAK1B,MAAO,CAAE2B,OAAQ,SAAtB,UACGX,GAAS,qEACTF,EAAac,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAAiB1C,YAAa0C,GAAQA,EAAEzB,eElBrC0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.cf12e6b8.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport {\n  Stack,\n  Collapsible,\n  Card,\n  Button,\n  TextContainer,\n} from \"@shopify/polaris\";\n\nconst TransactionCard = ({ transaction }) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Card sectioned>\n      <Stack vertical>\n        <Button\n          onClick={() => setOpen(!open)}\n          ariaExpanded={open}\n          ariaControls=\"basic-collapsible\"\n        >\n          Toggle\n        </Button>\n        <TextContainer>\n          <p style={{ color: transaction.type === \"debit\" ? \"red\" : \"green\" }}>\n            <b>Type: </b>\n            {transaction.type}\n          </p>\n        </TextContainer>\n        <Collapsible\n          open={open}\n          id=\"basic-collapsible\"\n          transition={{\n            duration: \"500ms\",\n            timingFunction: \"ease-in-out\",\n          }}\n          expandOnPrint\n        >\n          <TextContainer>\n            <p>\n              <b>Amount: </b>${transaction.amount}\n            </p>\n            <p>\n              <b>Date: </b>\n              {new Date(transaction.effectiveDate).toLocaleDateString()}\n            </p>\n          </TextContainer>\n        </Collapsible>\n      </Stack>\n    </Card>\n  );\n};\nexport default TransactionCard;\n","import \"./App.css\";\nimport \"@shopify/polaris/dist/styles.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { AppProvider, Page } from \"@shopify/polaris\";\nimport TransactionCard from \"./components/transactioncard\";\nimport { API_URL } from \"./configs.js\";\n\nfunction App() {\n  const [transactions, setTransactions] = useState([]);\n  const [error, setError] = useState(false);\n\n  const fetchTransactions = async () => {\n    try {\n      const resp = await axios.get(`${API_URL}/transactions`);\n      setTransactions(resp.data);\n    } catch (err) {\n      setError(true);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  return (\n    <AppProvider>\n      <Page>\n        <div style={{ height: \"200px\" }}>\n          {error && <p>There was an error fetching the data</p>}\n          {transactions.map((e) => (\n            <TransactionCard transaction={e} key={e.id} />\n          ))}\n        </div>\n      </Page>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","const API_URL = \"http://localhost:3001\";\nexport { API_URL };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}